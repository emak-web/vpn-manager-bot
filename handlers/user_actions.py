from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types.link_preview_options import LinkPreviewOptions

from keyboards import user_menu
from forms import user_forms
from filters import is_authorized_user
from services import message_actions, wireguard_actions
from services.db_connector import db


router = Router()
router.message.filter(is_authorized_user.IsAuthorizedUserFilter(is_user=True))
router.callback_query.filter(is_authorized_user.IsAuthorizedUserFilter(is_user=True))


@router.message(Command('start'))
async def cmd_start(message: Message):
    await message.answer(
        f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\nü§ñ –î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω —ç—Ç–æ—Ç –±–æ—Ç?\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–µ–≥–æ –≤–ø–Ω —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Å–µ –±–æ–ª—å—à–µ –∏ –±–æ–ª—å—à–µ (—Å–∫–æ—Ä–µ–µ —Å –∫–∞–∂–¥—ã–º –≥–æ–¥–æ–º), —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤ —Ç–æ–∂–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏—Ö —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —è —Å–æ–∑–¥–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∑–¥–µ—Å—å. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—é–¥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–ø–æ —Ç–∏–ø—É ‚Äú–≤–ø–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∫–æ—Ä–æ –≤—Å–µ –ø–æ—á–∏–Ω—é‚Äù).\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n–ö–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É üëáüëáüëá',
        reply_markup=user_menu.get_main_menu()
    )


@router.message(F.text == 'üîç VPN –°—Ç–∞—Ç—É—Å')
async def cmd_get_status(message: Message):
    if db.get_number_of_configs(message.from_user.id):
        answer = wireguard_actions.get_peer(message.from_user.full_name, message.from_user.username)
    else:
        answer = '–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤. '
    await message.answer(
        answer,
        reply_markup=user_menu.get_main_menu()
    )


@router.message(F.text == 'üìÑ –ú–æ–∏ –ö–æ–Ω—Ñ–∏–≥–∏')
async def cmd_get_my_config(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_configs = db.get_user_configs(user_id)
    number_of_configs = len(user_configs)

    # if user has no configs
    if number_of_configs == 0:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤.')
        await state.clear()

    # if user has one config
    elif number_of_configs == 1:
        await message_actions.send_or_create_config_file(
            message, user_id, user_configs, 0, '–í–∞—à WireGuard –∫–æ–Ω—Ñ–∏–≥.', user_menu.get_main_menu()
        )
        await state.clear()
            
    elif number_of_configs > 1:
        await state.set_state(user_forms.GetConfig.index)
        await state.update_data(user_id=user_id, configs=user_configs)
        await message.answer(
            f'–£ –≤–∞—Å –µ—Å—Ç—å {number_of_configs} –∫–æ–Ω—Ñ–∏–≥–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:',
            reply_markup=user_menu.get_choose_config_keyboard(number_of_configs)
        )


@router.callback_query(user_forms.GetConfig.index)
async def get_config_index(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data) - 1
    data = await state.get_data()
    user_configs = data['configs']
    user_id = data['user_id']

    await callback.message.delete()
    await message_actions.send_or_create_config_file(
        callback.message, user_id, user_configs, index, '–í–∞—à WireGuard –∫–æ–Ω—Ñ–∏–≥.', user_menu.get_main_menu()
    )
    await state.clear()
